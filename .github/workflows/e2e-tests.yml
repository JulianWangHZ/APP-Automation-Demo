name: BrowserStack - iOS/padOS E2E Manual Trigger Tests

on:
  workflow_dispatch:
    inputs:
      tags:
        description: "Test tags (e.g. regression, login)"
        required: false
        default: ""
      platform:
        description: "Test platform (ios/padOS)"
        required: true
        default: "ios"
        type: choice
        options:
          - ios
          - padOS

env:
  PYTHON_VERSION: "3.9"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Allure CLI
        run: npm install -g allure-commandline --save-dev

      - name: Create reports directory
        run: |
          mkdir -p reports/{allure/{results,reports},html,coverage,logs}
          mkdir -p allure-results
          mkdir -p allure-report
          mkdir -p screenshots
          echo "Reports directory structure created"

      - name: Set up environment variables
        run: |
          cat > .env << EOF
          TEST_ENV=github_actions
          IS_CI=true
          APPIUM_OS=${{ github.event.inputs.platform }}
          BROWSERSTACK_USERNAME=${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY=${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          BROWSERSTACK_IOS_APP_ID=${{ secrets.BROWSERSTACK_IOS_APP_ID }}
          BROWSERSTACK_DEVICE_NAME=${{ github.event.inputs.platform == 'padOS' && 'iPad Pro (12.9-inch) (6th generation)' || 'iPhone 15 Pro' }}
          BROWSERSTACK_OS_VERSION=${{ github.event.inputs.platform == 'padOS' && '17.5' || '17.5' }}
          BROWSERSTACK_PROJECT_NAME=App E2E Tests
          BROWSERSTACK_BUILD_NAME=GitHub Actions Build
          BROWSERSTACK_SESSION_NAME=E2E Test Session
          BROWSERSTACK_HUB_URL=https://hub-cloud.browserstack.com/wd/hub
          DEVICE_COUNT=1
          FULL_RESET=True
          AUTO_ACCEPT_ALERTS=True
          IMPLICIT_WAIT=25
          TEST_EMAIL= "qatest@hunger.ai"
          VERIFICATION_CODE= "555666"
          PLATFORM_NAME=${{ github.event.inputs.platform == 'padOS' && 'padOS' || 'iOS' }}
          AUTOMATION_NAME=XCUITest
          EOF

      - name: Run tests
        run: |
          echo "Running ${{ github.event.inputs.platform }} E2E tests..."

          # install and start BrowserStack local test tool
          curl -L https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip -o BrowserStackLocal.zip
          unzip BrowserStackLocal.zip
          ./BrowserStackLocal --key ${{ secrets.BROWSERSTACK_ACCESS_KEY }} --daemon start

          # run tests
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tags }}" ]; then
            echo "Running manual trigger with tag: ${{ github.event.inputs.tags }}"
            python -m pytest -v -k "${{ github.event.inputs.tags }}" --alluredir=allure-results
          else
            if [ "${{ github.event.inputs.platform }}" = "padOS" ]; then
              echo "Running padOS tests"
              python -m pytest -v tests/steps/padOS/ --alluredir=allure-results
            else
              echo "Running iOS tests"
              python -m pytest -v tests/steps/ios/ --alluredir=allure-results
            fi
          fi

      - name: Copy test results to reports directory
        run: |
          cp -r allure-results/* reports/allure/results/ || true
          echo "Test results copied to reports directory"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.event.inputs.platform }}-${{ github.run_id }}
          path: reports/allure/results
          retention-days: 30

      - name: Set report date env
        run: |
          # Set timezone to Asia/Taipei
          export TZ='Asia/Taipei'
          echo "REPORT_DATE=$(date +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV

      - name: Create reports directory structure
        run: |
          mkdir -p reports/allure/reports/${{ github.event.inputs.platform }}
          echo "Reports directory structure created"

      - name: Clean old Allure reports (keep 60 days)
        run: |
          REPORTS_DIR=reports/allure/reports/${{ github.event.inputs.platform }}
          find $REPORTS_DIR -maxdepth 1 -type d -name '20*' -mtime +60 -exec rm -rf {} + 2>/dev/null || true

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@master
        with:
          allure_results: reports/allure/results
          allure_report: reports/allure/reports/${{ github.event.inputs.platform }}/${{ env.REPORT_DATE }}
          keep_reports: 20

      - name: Generate Allure Index Page
        run: |
          REPORTS_DIR=reports/allure/reports/${{ github.event.inputs.platform }}
          sudo chmod -R 777 $REPORTS_DIR
          INDEX_FILE=$REPORTS_DIR/index.html
          echo '<!DOCTYPE html><html><head><meta charset="utf-8"><title>${{ github.event.inputs.platform | upper }} Allure Reports Index</title></head><body><h1>${{ github.event.inputs.platform | upper }} Allure Reports</h1><ul>' > $INDEX_FILE
          for d in $REPORTS_DIR/*/ ; do
            dname=$(basename "$d")
            if [ "$dname" != "latest" ]; then
              echo "<li><a href=\"./$dname/\">$dname</a></li>" >> $INDEX_FILE
            fi
          done
          echo '</ul></body></html>' >> $INDEX_FILE

      - name: Deploy to Netlify (date version)
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: reports/allure/reports/${{ github.event.inputs.platform }}/${{ env.REPORT_DATE }}
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy Allure report ${{ env.REPORT_DATE }} for ${{ github.event.inputs.platform }}"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Deploy Allure Index to Netlify Root
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: reports/allure/reports/${{ github.event.inputs.platform }}
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy ${{ github.event.inputs.platform | upper }} Allure index page"
          enable-pull-request-comment: false
          enable-commit-comment: false
          overwrites-pull-request-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Debug allure-report content
        run: ls -l reports/allure/reports/${{ github.event.inputs.platform }}

      - name: Check Allure CLI version
        run: allure --version

      # - name: Send test results to Slack
      #   if: always()
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const fs = require('fs');
      #
      #       // read summary.json
      #       const summaryJson = fs.readFileSync('allure-report/widgets/summary.json', 'utf8');
      #       const summary = JSON.parse(summaryJson);
      #
      #       // calculate test time
      #       const totalDurationSeconds = summary.time.duration / 1000;
      #       const minutes = Math.floor(totalDurationSeconds / 60);
      #       const seconds = Math.floor(totalDurationSeconds % 60);
      #
      #       // get statistics
      #       const stats = summary.statistic;
      #       const total = stats.total;
      #       const passed = stats.passed;
      #       const failed = stats.failed;
      #       const skipped = stats.skipped;
      #
      #       // build Slack message
      #       const platform = '${{ github.event.inputs.platform }}';
      #       const message = {
      #         blocks: [
      #           {
      #             type: "section",
      #             text: {
      #               type: "mrkdwn",
      #               text: `*${platform.toUpperCase()} APP E2E Test Results 🤖*`
      #             }
      #           },
      #           {
      #             type: "section",
      #             text: {
      #               type: "mrkdwn",
      #               text: `*Test Statistics*\n• Total: ${total}\n• Passed: ${passed}\n• Failed: ${failed}\n• Skipped: ${skipped}\n• Execution Time: ${minutes} minutes ${seconds} seconds`
      #             }
      #           },
      #           {
      #             type: "section",
      #             text: {
      #               type: "mrkdwn",
      #               text: `*Test Details*\n• Test Platform: ${platform}\n• Device Count: 1\n• Test Tags: ${{ github.event.inputs.tags || 'All' }}`
      #             }
      #           },
      #           {
      #             type: "section",
      #             text: {
      #               type: "mrkdwn",
      #               text: `*View Detailed Report*\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
      #             }
      #           }
      #         ]
      #       };
      #
      #       // send to Slack
      #       const slackWebhook = '${{ secrets.SLACK_WEBHOOK_URL }}';
      #       const https = require('https');
      #       const options = {
      #         method: 'POST',
      #         headers: {
      #           'Content-Type': 'application/json'
      #         }
      #       };
      #
      #       const req = https.request(slackWebhook, options);
      #       req.write(JSON.stringify(message));
      #       req.end();

      - name: Test Results Summary
        if: always()
        run: |
          echo "=== ${{ github.event.inputs.platform | upper }} E2E Test Results Summary ==="
          echo "Platform: ${{ github.event.inputs.platform | upper }}"
          echo "Device: ${{ github.event.inputs.platform == 'padOS' && 'iPad Pro (12.9-inch) (6th generation)' || 'iPhone 15 Pro' }}"
          echo "OS Version: 17.5"
          echo "Device Count: 1"
          echo "Test Tags: ${{ github.event.inputs.tags || 'All Tests' }}"
          echo "Build URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [ -f "reports/allure/reports/${{ github.event.inputs.platform }}/${{ env.REPORT_DATE }}/widgets/summary.json" ]; then
            echo ""
            echo "=== Test Statistics ==="
            cat reports/allure/reports/${{ github.event.inputs.platform }}/${{ env.REPORT_DATE }}/widgets/summary.json | jq -r '.statistic | "Total: \(.total), Passed: \(.passed), Failed: \(.failed), Skipped: \(.skipped)"'
            
            duration=$(cat reports/allure/reports/${{ github.event.inputs.platform }}/${{ env.REPORT_DATE }}/widgets/summary.json | jq -r '.time.duration')
            duration_seconds=$((duration / 1000))
            minutes=$((duration_seconds / 60))
            seconds=$((duration_seconds % 60))
            echo "Execution Time: ${minutes} minutes ${seconds} seconds"
          else
            echo "No test results found"
          fi

      - name: Test Insights
        if: always()
        run: |
          echo "=== ${{ github.event.inputs.platform | upper }} E2E Test Insights ==="

          if [ -f "reports/allure/reports/${{ github.event.inputs.platform }}/${{ env.REPORT_DATE }}/widgets/summary.json" ]; then
            # Get test statistics
            total=$(cat reports/allure/reports/${{ github.event.inputs.platform }}/${{ env.REPORT_DATE }}/widgets/summary.json | jq -r '.statistic.total')
            passed=$(cat reports/allure/reports/${{ github.event.inputs.platform }}/${{ env.REPORT_DATE }}/widgets/summary.json | jq -r '.statistic.passed')
            failed=$(cat reports/allure/reports/${{ github.event.inputs.platform }}/${{ env.REPORT_DATE }}/widgets/summary.json | jq -r '.statistic.failed')
            skipped=$(cat reports/allure/reports/${{ github.event.inputs.platform }}/${{ env.REPORT_DATE }}/widgets/summary.json | jq -r '.statistic.skipped')
            
            # Calculate success rate
            if [ "$total" -gt 0 ]; then
              success_rate=$((passed * 100 / total))
              echo "Success Rate: ${success_rate}%"
            fi
            
            # Test execution insights
            echo ""
            echo "=== Execution Insights ==="
            if [ "$failed" -eq 0 ]; then
              echo "✅ All tests passed successfully!"
            elif [ "$failed" -gt 0 ]; then
              echo "❌ $failed test(s) failed"
              echo "⚠️  $skipped test(s) skipped"
            fi
            
            if [ "$skipped" -gt 0 ]; then
              echo "📋 $skipped test(s) were skipped - consider reviewing test conditions"
            fi

          else
            echo "No test results available for insights"
          fi

      - name: Notify on Failure
        if: failure()
        run: |
          echo "🚨 TEST FAILURE - ${{ github.event.inputs.platform | upper }}"
          echo "Platform: ${{ github.event.inputs.platform | upper }}"
          echo "Device: ${{ github.event.inputs.platform == 'padOS' && 'iPad Pro (12.9-inch) (6th generation)' || 'iPhone 15 Pro' }}"
          echo "Build: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "Triggered by: ${{ github.actor }}"

          if [ -f "reports/allure/reports/${{ github.event.inputs.platform }}/${{ env.REPORT_DATE }}/widgets/summary.json" ]; then
            failed=$(cat reports/allure/reports/${{ github.event.inputs.platform }}/${{ env.REPORT_DATE }}/widgets/summary.json | jq -r '.statistic.failed')
            echo "Failed tests: $failed"
          fi

          echo "Check Allure report for details"

permissions:
  id-token: write
  contents: read
